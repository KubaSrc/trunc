classdef robotArm
    % Attributes
    properties
        port;
        channels = 0:8;
        comp = load("./state/comp.mat").comp;
        comp_max = load("./state/comp_max.mat").comp_max;
        home_pos = load("./state/home_measured.mat").pos;
        pause_length = 3;
        min_motor = -250;
        max_motor = 150;
        nnc;
        home_relative;
        arm_ID = 8
        stick_ID = 9;
    end

    methods
        % Constructor
        function obj = robotArm()
            addpath('./util/NatNet_SDK_4.1/NatNetSDK/Samples/Matlab');
            addpath('./util/')
            if ~exist('obj.port', 'var')
                obj.port = serialport("COM4", 9600);
                initialize_servos(obj.port, obj.channels, obj.pause_length, obj.comp);
                pause(5);
            end
            
            % Connect to motive
            if ~exist('nnc','var')
                obj.nnc = connect_to_natnet();
            end
            
        end
        
        % Read in position from Mocap
        function tool = get_pose(obj)
            if arm.nnc.getFrame.nRigidBodies > 2
                for i = 1:arm.nnc.getFrame.nRigidBodies
                    body = obj.nnc.getFrame().RigidBodies(i);
                    id = body.ID;
                    if id == obj.arm_ID
                        tool=body;
                        break;
                    end
                end
            else
                tool = obj.nnc.getFrame().RigidBodies(1); %End Effector
            end
        end

        % function stick = get_pose_stick(obj)
        % 
        % end

        % Read in position from Mocap
        function tool_pos = get_pose_absolute(obj)
            % Obtain rigid body state
            tool = obj.nnc.getFrame().RigidBodies(1); %End Effector

            xi = [1000.*tool.x, 1000.*tool.y, 1000.*tool.z, tool.qw, tool.qx, tool.qy, tool.qz];

            % Coordinate transform relative to home_pos
            xi(1:3) = (xi(1:3) - obj.home_relative(1:3)) + obj.home_pos(1:3);

            q1 = obj.home_pos(4:end);
            p1 = obj.home_pos(1:3);
            q2 = obj.home_relative(4:end);
            p2 = obj.home_pos(1:3);
            qi = xi(4:end);
            pi = xi(1:3);

            % Transform based on coordinate frames
            [qi_new,pi_new] = coordinate_transform(q1,p1,q2,p2,qi,pi);
            
            qi_swap = [qi_new(2:end),qi_new(1)];

            tool_pos = [pi_new.',qi_swap]; 
            
        end

        % Set relative home position
        function obj = set_relative_home(obj)
            pause(2);
            tool = obj.get_pose();
            obj.home_relative = [1000.*tool.x, 1000.*tool.y, 1000.*tool.z, tool.qw, tool.qx, tool.qy, tool.qz];
            disp(obj.home_relative)
        end
        
        % Method to set the position
        function set_pos(obj, motor_pos)
            
            if min(motor_pos) < obj.min_motor - eps
                error('Motor lower bound exceeded! Sent: %.2f Bound: %.3f', min(motor_pos), obj.min_motor);

            elseif max(motor_pos) > obj.max_motor + eps
                error('Motor upper bound exceeded! Sent: %.2f Bound: %.3f', max(motor_pos), obj.max_motor);

            else
                final_pos = zeros(1,8);
                current_pos = zeros(1,8);
                threshold = 1;
                reached = false;
                
                % Sends commands to servo motors
                for idx = 0:8
                    target = set_servo_position_auxarm(obj.port, idx, motor_pos(idx+1));
                    final_pos(idx+1) = target;
                end
                
                % Record initial time
                startTime = tic;
    
                % Waits until all servo motors are done moving
                while ~reached
                    % Read positions
                    current_pos = zeros(1, 9); % Preallocate array for current positions
                    for idx = 0:8
                        current = get_servo_position(obj.port, idx);
                        current_pos(idx+1) = current;
                    end
            
                    % Calculate error
                    e = sum((final_pos - current_pos).^2);
            
                    % Check threshold
                    if e <= threshold
                        reached = true;
                    end
            
                    % Check if timeout (15 seconds) is exceeded
                    if toc(startTime) > 20
                        fprintf('Timeout: Servos did not reach the desired position within 20 seconds.\n');
                        disp(e)
                        break;
                    end
                end
            end
        end

        % Set pos based on l_delta
        function set_pos_delta(obj,l_delta)
            % Set arm to new pose
            arm_pos = double(obj.comp+l_delta);
            % Prevents the arm from letting too much slack out
            if max(arm_pos) > obj.max_motor
                motor_slice = arm_pos > obj.max_motor;
                disp("Clipping l_delta.")
                l_delta(motor_slice) = l_delta(motor_slice) - (arm_pos(motor_slice)-obj.max_motor);
                arm_pos = double(obj.comp+l_delta);
            end

            % Send command to servos
            obj.set_pos(arm_pos)
        end

        % Sends arm to compressed state and then cycles a known trajectory
        function reset_arm(obj)
            fprintf('Resetting arm.\n')
            obj.set_pos(obj.comp)
            for rep = 1:5
                pause(.5)
                obj.set_pos(obj.comp_max)
                pause(.5)
                obj.set_pos(obj.comp)
            end
        end

        % Method to turn off the motors
        function stop_motors(obj)
            stop_servos(obj.port, obj.channels);
        end
    end
end
